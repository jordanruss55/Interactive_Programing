# Blackjack
# Template provided by coursework
# https://www.coursera.org/learn/interactive-python-2
# Direct link to browser based Python interpretor CodeSkulptor:  https://py2.codeskulptor.org/#user49_h10Ek3JOAb_9.py
# Use buttons to deal, hit and stand.  I am not responsible if you loose all your money.  

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}
players_hand = None
dealers_hand = None
deck = None
outcome = "Feeling Lucky?"

# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.hand_cards = []

    def __str__(self):
        message = "hand contains "
        for c in self.hand_cards:
            message += (str(c) + ", ")
        return message

    def add_card(self, card):
        self.hand_cards.append(card) 

    def get_value(self):
        value = 0
        for c in self.hand_cards:
            value += VALUES[c.get_rank()]
        for c in self.hand_cards:
            if c.get_rank() == 'A' and value + 10 <= 21:
                value += 10
        return value
        
    def draw(self, canvas, pos):
        for c in range(len(self.hand_cards)):
            self.hand_cards[c].draw(canvas,(pos[0] + CARD_SIZE[0] * c, pos[1]))

# define deck class 
class Deck:
    def __init__(self):
        self.deck_cards = []
        [self.deck_cards.append(Card(s,r)) for s in SUITS for r in RANKS]
            
    def shuffle(self):
        random.shuffle(self.deck_cards)

    def deal_card(self):
        return self.deck_cards.pop()
    
    def get_deck_size(self):
        return len(self.deck_cards)

    def __str__(self):
        deck_message = "Deck contains: "
        for c in self.deck_cards:
            deck_message += (str(c) + ", ")
        return deck_message

#define event handlers for buttons
def deal():
    global outcome, in_play, players_hand, dealers_hand, deck, score
    if in_play:
        outcome = "Player forfeits previous hand, hit or stand?"
        score -= 1
    else:
        outcome = "Hit or stand?"
   
    deck = Deck()
    deck.shuffle()
    players_hand = Hand()
    players_hand.add_card(deck.deal_card())
    players_hand.add_card(deck.deal_card())
    print "Players " + str(players_hand)
    dealers_hand = Hand()
    dealers_hand.add_card(deck.deal_card())
    dealers_hand.add_card(deck.deal_card()) 
    print "Dealers " + str(dealers_hand)
    in_play = True

def hit():
    global score, players_hand, in_play, outcome
    if in_play:
        players_hand.add_card(deck.deal_card())
        if players_hand.get_value() <= 21:
            in_play = True
            outcome = "Your score is " + str(players_hand.get_value()) + ". Hit or stand?"
        else:
            in_play = False
            score -= 1
            outcome = "Your score is " + str(players_hand.get_value()) + ". You have busted!"
    else:
        outcome = "Hand is no longer in play. New deal?"
        
def stand():
    global in_play, score, outcome
    if in_play:
        while  dealers_hand.get_value() < 17:
            dealers_hand.add_card(deck.deal_card()) 
        if dealers_hand.get_value() > 21:
            outcome = "Dealer busts, you win!"
            in_play = False
            score += 1
        elif dealers_hand.get_value() >= players_hand.get_value():
            outcome = "Dealer wins"
            in_play = False
            score -= 1
        else:
            outcome = "Player wins"
            in_play = False
            score += 1       
    else:
        outcome = "Hand is no longer in play. New deal?"

# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    for c in range(deck.get_deck_size()):
         canvas.draw_image(card_back, CARD_CENTER, CARD_SIZE, [50+c,50+c], CARD_SIZE)
    canvas.draw_text("BLACKJACK", (230, 50), 24, "Black", "sans-serif")
    canvas.draw_text(outcome, (300 - len(outcome) * 3.5, 75), 18, "Black", "sans-serif")
    canvas.draw_text("Score: " + str(score), (500, 75), 18, "Black", "sans-serif")
    
    canvas.draw_polygon([(90, 180), (500, 180), (500,300), (90,300)], 12, 'Red', 'Red')
    canvas.draw_text("Dealers hand", (300 - 12 * 4, 195), 18, "Black", "sans-serif")
    canvas.draw_polygon([(90, 380), (500, 380), (500,500), (90,500)], 12, 'Red', 'Red')
    canvas.draw_text("Players hand", (300 - 12 * 4, 395), 18, "Black", "sans-serif")
    dealers_hand.draw(canvas,(100,200))
    players_hand.draw(canvas,(100,400))
    if in_play:
        canvas.draw_image(card_back, CARD_CENTER, CARD_SIZE, [136,248], CARD_SIZE)
    
# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

# get things rolling
deal()
frame.start()
