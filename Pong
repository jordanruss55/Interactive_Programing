# Implementation of classic arcade game Pong
# Template provided by coursework
# https://www.coursera.org/account/accomplishments/verify/NVQG2J2UYMCA
# Direct link to browser based Python interpretor CodeSkulptor:  https://py2.codeskulptor.org/#user49_tEPBVCEDhB_4.py
# Move left paddle with 'w' & 's' keys right paddle with up and down arrows

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = True
RIGHT = False
ball_pos = [300, 200]
ball_vel = [0,0]
paddle1_pos = [HEIGHT / 2.0 - HALF_PAD_HEIGHT, HEIGHT / 2.0 + HALF_PAD_HEIGHT]
paddle2_pos = [HEIGHT / 2.0 - HALF_PAD_HEIGHT, HEIGHT / 2.0 + HALF_PAD_HEIGHT]
paddle1_vel = [0,0]
paddle2_vel = [0,0]
left_score = 0
right_score = 0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos=[300,200]
    ball_vel[0] = random.randrange(120, 241) / 60.0
    ball_vel[1] = -random.randrange(60, 181) / 60.0
    
    if RIGHT:
        ball_vel[0] = ball_vel[0]
    elif LEFT:
        ball_vel[0] = -ball_vel[0]

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel, left_score, right_score  # these are numbers
    
    left_score = 0
    right_score = 0
    spawn_ball(1)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, LEFT, RIGHT, left_score, right_score
 
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_text(str(left_score), (150, 50), 48, "White")
    canvas.draw_text(str(right_score), (450, 50), 48, "White")
  
    # update ball
    
    # Bounce off of top or bottom rales
    if (ball_pos[1] <= 0 + BALL_RADIUS or ball_pos[1] + BALL_RADIUS >= HEIGHT):
        ball_vel[1] = -1 * ball_vel[1]
    
    # Restart ball if it passes the left or right goal heading the opposite direction
    if ball_pos[0] + BALL_RADIUS >= WIDTH - PAD_WIDTH:
        if paddle2_pos[0] <= ball_pos[1] <= paddle2_pos[1]:
            ball_vel[0] = -1.1 * ball_vel[0]
        else:
            LEFT=True
            Right=False
            left_score += 1
            spawn_ball(LEFT)
            
    if ball_pos[0] <= 0 + PAD_WIDTH + BALL_RADIUS:
        if paddle1_pos[0] <= ball_pos[1] <= paddle1_pos[1]:
            ball_vel[0] = -1.1 * ball_vel[0]
        else:
            LEFT=False
            Right=True
            right_score += 1
            spawn_ball(RIGHT)

        
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1] 
    
    # draw ball
    canvas.draw_circle(ball_pos,BALL_RADIUS, 2, "White", "white")
    
    # update paddle's vertical position, keep paddle on the screen
    
    if paddle1_pos[0] + paddle1_vel[1] > 0 and paddle1_pos[1] + paddle1_vel[1] < HEIGHT:
        paddle1_pos[0] += paddle1_vel[1]
        paddle1_pos[1] += paddle1_vel[1]
    if paddle2_pos[0] + paddle2_vel[1]> 0 and paddle2_pos[1] + paddle2_vel[1] < HEIGHT:
        paddle2_pos[0] += paddle2_vel[1]
        paddle2_pos[1] += paddle2_vel[1]
    
    # draw paddles
    canvas.draw_line((HALF_PAD_WIDTH,paddle1_pos[0]),(HALF_PAD_WIDTH,paddle1_pos[1]), 8, "White")
    canvas.draw_line((WIDTH-HALF_PAD_WIDTH,paddle2_pos[0]),(WIDTH-HALF_PAD_WIDTH,paddle2_pos[1]), 8, "White")

    # determine whether paddle and ball collide    
    # draw scores
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel[1] = -4
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel[1] = 4
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel[1] = -4
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel[1] = 4
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel[1] = 0
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel[1] = 0
        
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel[1] = 0
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel[1] = 0
        
def restart():
    new_game()


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Restart", restart, 60)


# start frame
new_game()
frame.start()
