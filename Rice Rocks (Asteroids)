# Implementation of Rice Rocks
# Template, graphics and sounds provided by coursework
# https://www.coursera.org/learn/interactive-python-2
# Direct link to browser based Python interpretor CodeSkulptor:  https://py2.codeskulptor.org/#user50_boZjwPBaNV_19.py
# Move ship with up, left, and right arrows, fire ze missiles with space bar

# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0
started = False
ship_rotation = math.pi*3/2
ship_angle_inc = 0.07
rock_group = set([])
missile_group = set([])
explosion_group = set([])
difficulty = 1

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
ship_thrust_sound.set_volume(1)
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# alternative upbeat soundtrack by composer and former IIPP student Emiel Stopler
# please do not redistribute without permission from Emiel at http://www.filmcomposer.nl
#soundtrack = simplegui.load_sound("https://storage.googleapis.com/codeskulptor-assets/ricerocks_theme.mp3")

# helper functions to handle transformations

def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)

def adjust_ship_angle(ship, key, key_direction):
    key_function = {37: -1, 39: 1}
    if key in key_function:
        ship.angle_vel = ship_angle_inc * key_function[key] * key_direction
    
def keydown(key):
    global a_missile
    adjust_ship_angle(my_ship, key, 1)
    if key == 38:
        my_ship.thruster_state(True)
    if key == 32:
        my_ship.shoot()
        
def keyup(key):
    adjust_ship_angle(my_ship, key, 0)
    if key == 38:
        my_ship.thruster_state(False)

def process_sprite_group(sprite_group, canvas):
    remove = []
    for sprite in sprite_group:
        if sprite.expired():
            remove.append(sprite)
    sprite_group.difference_update(remove)
    for sprite in sprite_group:
        sprite.draw(canvas)
    for sprite in sprite_group:
        sprite.update()

def object_vs_group(group, other_object):
    global explosion_group    
    collision = False
    remove = []
    for sprite in group:
        if sprite.collide(other_object):
            remove.append(sprite)
            collision = True
            if other_object == my_ship:
                explosion = Sprite(sprite.get_pos(), [0,0], math.pi, 0, explosion_image, explosion_info, explosion_sound)
                explosion_group.add(explosion)
    group.difference_update(remove)
    return collision 

def group_vs_group(group1, group2):
    global explosion_group
    collision = False
    remove = []
    for sprite in group1:
        if object_vs_group(group2, sprite):
            remove.append(sprite)
            explosion = Sprite(sprite.get_pos(), [0,0], math.pi, 0, explosion_image, explosion_info, explosion_sound)
            explosion_group.add(explosion)
            collision = True
    group1.difference_update(remove)
    return collision
        
# mouseclick handlers that reset UI and conditions whether splash image is drawn
def click(pos):
    global started
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True
    soundtrack.rewind()
    soundtrack.play()

# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.thrusters = False
        self.fwd_vector = [0,0]
        
    def draw(self,canvas):
        if self.thrusters:
            canvas.draw_image(self.image, [self.image_center[0] + self.image_size[0], self.image_center[1]], self.image_size, self.pos, self.image_size, self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
    
    def thruster_state(self, state):
            self.thrusters = state
            if self.thrusters:
                ship_thrust_sound.play()
            else:
                ship_thrust_sound.rewind()
    
    def shoot(self):
        global missile_group
        firing_pos = [0,0]
        firing_vel = [0,0]
        firing_pos[0] = self.pos[0] + self.fwd_vector[0] * self.image_size[0]/2
        firing_pos[1] = self.pos[1] + self.fwd_vector[1] * self.image_size[0]/2
        firing_vel[0] = self.fwd_vector[0] * 8  + self.vel[0]
        firing_vel[1] = self.fwd_vector[1] * 8  + self.vel[1]
        a_missile = Sprite(firing_pos, firing_vel, my_ship.angle, 0, missile_image, missile_info, missile_sound)
        missile_group.add(a_missile)
        
    def update(self):
        
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        
        self.angle += self.angle_vel
        self.fwd_vector = angle_to_vector(self.angle)
        if self.thrusters:
            self.vel[0] += self.fwd_vector[0]*0.09
            self.vel[1] += self.fwd_vector[1]*0.09
        self.vel[0] *= 0.99
        self.vel[1] *= 0.99
     
    def get_pos(self):
        return list(self.pos)
    
    def get_radius(self):
        return self.radius
            
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def draw(self, canvas):
        if self.animated:
            aged_image_center = [self.image_center[0] + self.image_size[0] * self.age, self.image_center[1]]
            canvas.draw_image(self.image, aged_image_center, self.image_size, self.pos, self.image_size, self.angle)
            self.age += 1
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
    
    def update(self):
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        self.angle += self.angle_vel
        self.age += 2
        
    def expired(self):
        if self.age >= self.lifespan:
            return True
    
    def collide(self, other_object):
        if dist(self.get_pos(),other_object.get_pos()) <= self.get_radius() + other_object.get_radius():
            return True
        else:
            return False
        
    def get_pos(self):
        return list(self.pos)
    
    def get_radius(self):
        return self.radius 
    
def draw(canvas):
    global time, lives, score, started, rock_group, difficulty, explosion_group
    
    # animate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_text("Score: " + str(score), (WIDTH-100, HEIGHT - 550), 24, 'White')
    canvas.draw_text("Lives: " + str(lives), (20, HEIGHT - 550), 24, 'White')

    # draw and update ship and sprite groups
    my_ship.draw(canvas)
    my_ship.update()
    process_sprite_group(rock_group, canvas)
    process_sprite_group(missile_group, canvas)
    process_sprite_group(explosion_group, canvas)
    
    # draw splash screen if not started
    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())
   
    # check for collisions and update groups score and lives
    if object_vs_group(rock_group, my_ship):
        lives -= 1
    if group_vs_group(missile_group, rock_group):
        score += 1
        difficulty += 0.1
    if lives == 0:
        started = False
        rock_group = set([])
        lives = 3
        score = 0
        soundtrack.pause()
        difficulty = 1
    
            
# timer handler that spawns a rock    
def rock_spawner():
    global rock_group
    if len(rock_group) < 13 and started:
        pos = [random.randrange(0,WIDTH),random.randrange(0,HEIGHT)]
        vel = [random.randrange(-30,30) * 0.02 * difficulty,random.randrange(-30,30) * 0.02 * difficulty]
        angle_vel = random.randrange(-20,20) * 0.005
        if dist(pos,my_ship.get_pos()) < (my_ship.get_radius() * 4):
            pass
        else:
            a_rock = Sprite(pos, vel, 0, angle_vel, asteroid_image, asteroid_info) 
            rock_group.add(a_rock)
    else:
        pass
        
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, -1], ship_rotation, ship_image, ship_info)

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)
timer = simplegui.create_timer(1000.0, rock_spawner)

# get things rolling
timer.start()
frame.start()
